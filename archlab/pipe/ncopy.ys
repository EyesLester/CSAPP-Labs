#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax		# count = 0;
	iaddq $-6,%rdx		# len <= 0?
	jl Rest			# if so, goto Rest:

SixSteps:	
	mrmovq (%rdi), %r8	# read val from src...
	mrmovq 8(%rdi), %r9	# read val from src...
	mrmovq 16(%rdi), %r10	# read val from src...
	mrmovq 24(%rdi), %r11	# read val from src...
	mrmovq 32(%rdi), %r12	# read val from src...
	mrmovq 40(%rdi), %r13	# read val from src...
	rmmovq %r8, (%rsi)
	rmmovq %r9, 8(%rsi)
	rmmovq %r10, 16(%rsi)
	rmmovq %r11, 24(%rsi)
	rmmovq %r12, 32(%rsi)
	rmmovq %r13, 40(%rsi)
	andq %r8, %r8		# val <= 0?
	jle Npos1
	iaddq $1, %rax		# count++
Npos1:
	andq %r9, %r9		# val <= 0?
	jle Npos2
	iaddq $1, %rax		# count++
Npos2:
	andq %r10, %r10		# val <= 0?
	jle Npos3
	iaddq $1, %rax		# count++
Npos3:
	andq %r11, %r11		# val <= 0?
	jle Npos4
	iaddq $1, %rax		# count++
Npos4:
	andq %r12, %r12		# val <= 0?
	jle Npos5
	iaddq $1, %rax		# count++
Npos5:
	andq %r13, %r13		# val <= 0?
	jle Npos6
	iaddq $1, %rax		# count++
Npos6:
	iaddq $48, %rdi		# src += 6 
	iaddq $48, %rsi		# dest += 6
	iaddq $-6, %rdx		# len >= 0?
	jge SixSteps		# if so, goto SixSteps:

Rest:
	iaddq $1 ,%rdx		# len == 0?
	jne Rest4
	mrmovq (%rdi), %r8	# read val from src...
	mrmovq 8(%rdi), %r9	# read val from src...
	mrmovq 16(%rdi), %r10	# read val from src...
	mrmovq 24(%rdi), %r11	# read val from src...
	mrmovq 32(%rdi), %r12	# read val from src...
	rmmovq %r8, (%rsi)
	rmmovq %r9, 8(%rsi)
	rmmovq %r10, 16(%rsi)
	rmmovq %r11, 24(%rsi)
	rmmovq %r12, 32(%rsi)
	andq %r8, %r8		# val <= 0?
	jle Rest5Npos1
	iaddq $1, %rax		# count++
Rest5Npos1:
	andq %r9, %r9		# val <= 0?
	jle Rest5Npos2
	iaddq $1, %rax		# count++
Rest5Npos2:
	andq %r10, %r10		# val <= 0?
	jle Rest5Npos3
	iaddq $1, %rax		# count++
Rest5Npos3:
	andq %r11, %r11		# val <= 0?
	jle Rest5Npos4
	iaddq $1, %rax		# count++
Rest5Npos4:
	andq %r12, %r12		# val <= 0?
	jle Rest5Npos5
	iaddq $1, %rax		# count++
Rest5Npos5:
	jmp Done
Rest4:
	iaddq $1 ,%rdx		# len == 0?
	jne Rest3
	mrmovq (%rdi), %r8	# read val from src...
	mrmovq 8(%rdi), %r9	# read val from src...
	mrmovq 16(%rdi), %r10	# read val from src...
	mrmovq 24(%rdi), %r11	# read val from src...
	rmmovq %r8, (%rsi)
	rmmovq %r9, 8(%rsi)
	rmmovq %r10, 16(%rsi)
	rmmovq %r11, 24(%rsi)
	andq %r8, %r8		# val <= 0?
	jle Rest4Npos1
	iaddq $1, %rax		# count++
Rest4Npos1:
	andq %r9, %r9		# val <= 0?
	jle Rest4Npos2
	iaddq $1, %rax		# count++
Rest4Npos2:
	andq %r10, %r10		# val <= 0?
	jle Rest4Npos3
	iaddq $1, %rax		# count++
Rest4Npos3:
	andq %r11, %r11		# val <= 0?
	jle Rest4Npos4
	iaddq $1, %rax		# count++
Rest4Npos4:
	jmp Done
Rest3:
	mrmovq (%rdi), %r8	# read val from src...
	mrmovq 8(%rdi), %r9	# read val from src...
	mrmovq 16(%rdi), %r10	# read val from src...
	iaddq $4 ,%rdx		# len == 0?
	je Done
	rmmovq %r8, (%rsi)
	andq %r8, %r8		# val <= 0?
	jle Rest3Npos1
	iaddq $1, %rax		# count++
Rest3Npos1:
	iaddq $-1 ,%rdx		# len == 0?
	je Done
	rmmovq %r9, 8(%rsi)
	andq %r9, %r9		# val <= 0?
	jle Rest3Npos2
	iaddq $1, %rax		# count++
Rest3Npos2:
	iaddq $-1 ,%rdx		# len == 0?
	je Done
	rmmovq %r10, 16(%rsi)
	andq %r10, %r10		# val <= 0?
	jle Done
	iaddq $1, %rax		# count++

# Loop:
# 	mrmovq (%rdi), %r10	# read val from src...
# 	rmmovq %r10, (%rsi)	# ...and store it to dst
# 	andq %r10, %r10		# val <= 0?
# 	jle Npos		# if so, goto Npos:
# 	iaddq $1, %rax		# count++
# Npos:	
# 	iaddq $-1, %rdx		# len--
# 	iaddq $8, %rdi		# src++
# 	iaddq $8, %rsi		# dst++
# 	andq %rdx,%rdx		# len > 0?
# 	jg Loop			# if so, goto Loop:
	
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
