# Execution begins at address 0
    .pos 0
    irmovq stack, %rsp # Set up stack pointer
    call main # Execute main program
    halt # Terminate program

.align 8
# Source block
src:
    .quad 0x00a
    .quad 0x0b0
    .quad 0xc00
# Destination block
dest:
    .quad 0x111
    .quad 0x222
    .quad 0x333

    
main: 
    irmovq src,%rdi
    irmovq dest,%rsi
    irmovq $0x3,%rdx
    call copy_block # copy_block(src, dest, len)
    ret

# long copy_block(long *src, long *dest, long len)
copy_block: 
    xorq %rax,%rax # result = 0
    jmp test # Goto test
loop: 
    mrmovq (%rdi),%rcx # val = src->val
    rmmovq %rcx,(%rsi) # dest->val = val
    irmovq $0x8,%r8
    addq %r8,%rdi # src++
    addq %r8,%rsi # dest++
    xorq %rcx,%rax # result ^= val
    irmovq $0x1,%r9
    subq %r9,%rdx
test: 
    andq %rdx,%rdx # Set CC
    jne loop # Stop when 0 #
    ret # Return

# Stack starts here and grows to lower addresses
    .pos 0x200
stack:
